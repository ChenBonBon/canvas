/* tslint:disable */
/* eslint-disable */
// Generated using typescript-generator version 2.36.1070 on 2022-10-12 14:56:09.

export const enum EdgeDesign {
  edge = "edge",
  transition = "transition",
}

export const enum IteratorFeature {
  map = "map",
  fold = "fold",
  i = "i",
  w = "w",
}

export const enum LabelDesign {
  INDEX = "INDEX",
  ITERATOR = "ITERATOR",
  INSTANCE = "INSTANCE",
  OPERATOR_REF = "OPERATOR_REF",
  ACCUMULATOR = "ACCUMULATOR",
  TEXT = "TEXT",
  PRIORITY = "PRIORITY",
  CONDITION = "CONDITION",
  ACTION = "ACTION",
  SIM_VALUE = "SIM_VALUE",
}

export const enum NodeDesign {
  inputNode = "inputNode",
  outputNode = "outputNode",
  lastNode = "lastNode",
  hidden = "hidden",
  localNode = "localNode",
  local_out = "local_out",
  local_in = "local_in",
  probeNode = "probeNode",
  signal = "signal",
  signalEmit = "signalEmit",
  signalLast = "signalLast",
  textualExprNode = "textualExprNode",
  assume = "assume",
  guarantee = "guarantee",
  terminator = "terminator",
  plusNAryNode = "plusNAryNode",
  minusNAryNode = "minusNAryNode",
  multiNAryNode = "multiNAryNode",
  polymorphicAryNode = "polymorphicAryNode",
  moduloAryNode = "moduloAryNode",
  unaryMinusNAryNode = "unaryMinusNAryNode",
  numericCastOp = "numericCastOp",
  lessThanNode = "lessThanNode",
  lessThanOrEqualNode = "lessThanOrEqualNode",
  greaterThanNode = "greaterThanNode",
  greaterThanOrEqualNode = "greaterThanOrEqualNode",
  differentNode = "differentNode",
  equalNode = "equalNode",
  andAryNode = "andAryNode",
  orAryNode = "orAryNode",
  notAryNode = "notAryNode",
  xorAryNode = "xorAryNode",
  boolActivate = "boolActivate",
  restartNode = "restartNode",
  map = "map",
  mapi = "mapi",
  mapw = "mapw",
  mapwi = "mapwi",
  fold = "fold",
  foldi = "foldi",
  foldw = "foldw",
  foldwi = "foldwi",
  mapfold = "mapfold",
  mapfoldi = "mapfoldi",
  mapfoldw = "mapfoldw",
  mapfoldwi = "mapfoldwi",
  initNode = "initNode",
  previous = "previous",
  followedBy = "followedBy",
  times = "times",
  operatorRef = "operatorRef",
  ifThenElse = "ifThenElse",
  caseOp = "caseOp",
  landAryNode = "landAryNode",
  lorAryNode = "lorAryNode",
  lxorAryNode = "lxorAryNode",
  lnotAryNode = "lnotAryNode",
  leftShift = "leftShift",
  rightShift = "rightShift",
  constantNode = "constantNode",
  globalNode = "globalNode",
  parameterNode = "parameterNode",
  dataStructureNode = "dataStructureNode",
  dataArrayNode = "dataArrayNode",
  scalarToVectorNode = "scalarToVectorNode",
  slice = "slice",
  concatenation = "concatenation",
  reverse = "reverse",
  transpose = "transpose",
  prjDyn = "prjDyn",
  projection = "projection",
  chgIth = "chgIth",
  make = "make",
  flatten = "flatten",
  ifBlock = "ifBlock",
  ifNode = "ifNode",
  thenNode = "thenNode",
  elseNode = "elseNode",
  whenBlock = "whenBlock",
  whenNode = "whenNode",
  whenMatch = "whenMatch",
  stateMachine = "stateMachine",
  state = "state",
  fork = "fork",
  transitionAction = "transitionAction",
  leftPort = "leftPort",
  rightPort = "rightPort",
  topPort = "topPort",
  bottomPort = "bottomPort",
  defaultPort = "defaultPort",
  squarePort = "squarePort",
  leftLabel = "leftLabel",
  defaultLabel = "defaultLabel",
}

export const enum ShapeDesign {
  RV_LINE = "RV_LINE",
  RECTANGLE = "RECTANGLE",
  ITERATOR_BACKGROUND = "ITERATOR_BACKGROUND",
  SHAPE = "SHAPE",
  OP_CALL = "OP_CALL",
  OPERATOR_UNDEFINED = "OPERATOR_UNDEFINED",
  ACTIVATE = "ACTIVATE",
  RESTART = "RESTART",
}

export const enum TransitionKind {
  Weak = "Weak",
  Strong = "Strong",
  Synchro = "Synchro",
}
